
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000928  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ad0  08000ad0  00010ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000adc  08000adc  00010ae4  2**0
                  CONTENTS
  4 .ARM          00000000  08000adc  08000adc  00010ae4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000adc  08000ae4  00010ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000adc  08000adc  00010adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae0  08000ae0  00010ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ae4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ae4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010ae4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017c8  00000000  00000000  00010b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000434  00000000  00000000  000122d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000118  00000000  00000000  00012710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e0  00000000  00000000  00012828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001fed  00000000  00000000  00012908  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001161  00000000  00000000  000148f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008e97  00000000  00000000  00015a56  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001e8ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000038c  00000000  00000000  0001e968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ab8 	.word	0x08000ab8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000ab8 	.word	0x08000ab8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInits>:

#include <string.h>
#include "stm32f407xx.h"

void SPI2_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIpins;

	SPIpins.pGPIOx = GPIOB;
 80001fe:	4b14      	ldr	r3, [pc, #80]	; (8000250 <SPI2_GPIOInits+0x58>)
 8000200:	607b      	str	r3, [r7, #4]
	SPIpins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	737b      	strb	r3, [r7, #13]
	SPIpins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	SPIpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	SPIpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	SPIpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//SPI_SCLK CONFIG
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000216:	230d      	movs	r3, #13
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f96d 	bl	80004fc <GPIO_Init>

	//SPI_MOSI
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000222:	230f      	movs	r3, #15
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f967 	bl	80004fc <GPIO_Init>

	//SPI_MISO
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800022e:	230e      	movs	r3, #14
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f961 	bl	80004fc <GPIO_Init>

	//SPI_NSS
	SPIpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800023a:	230c      	movs	r3, #12
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f95b 	bl	80004fc <GPIO_Init>
}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020400 	.word	0x40020400

08000254 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <SPI2_Inits+0x38>)
 800025c:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800025e:	2301      	movs	r3, #1
 8000260:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000262:	2301      	movs	r3, #1
 8000264:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000266:	2300      	movs	r3, #0
 8000268:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800026a:	2300      	movs	r3, #0
 800026c:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800026e:	2300      	movs	r3, #0
 8000270:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000272:	2300      	movs	r3, #0
 8000274:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 8000276:	2301      	movs	r3, #1
 8000278:	73bb      	strb	r3, [r7, #14]
	SPI_Init(&SPI2handle);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fb3f 	bl	8000900 <SPI_Init>
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40003800 	.word	0x40003800

08000290 <main>:


int main()
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0

	char user_data[] = "Hello World";
 8000296:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <main+0x40>)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	ca07      	ldmia	r2, {r0, r1, r2}
 800029c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//this function is used to initialise the gpio pins to behave as spi2 pins
	SPI2_GPIOInits();
 80002a0:	f7ff ffaa 	bl	80001f8 <SPI2_GPIOInits>
	SPI2_Inits();
 80002a4:	f7ff ffd6 	bl	8000254 <SPI2_Inits>

	SPI_SSIConfig(SPI2, ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	480a      	ldr	r0, [pc, #40]	; (80002d4 <main+0x44>)
 80002ac:	f000 fbc5 	bl	8000a3a <SPI_SSIConfig>

	//enable the SPI2 peripheral
	SPI_PeriClockControl(SPI2, ENABLE);
 80002b0:	2101      	movs	r1, #1
 80002b2:	4808      	ldr	r0, [pc, #32]	; (80002d4 <main+0x44>)
 80002b4:	f000 facc 	bl	8000850 <SPI_PeriClockControl>

	SPI_SendData(SPI2, (uint8_t *)user_data, strlen(user_data));
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff94 	bl	80001e8 <strlen>
 80002c0:	4602      	mov	r2, r0
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4619      	mov	r1, r3
 80002c6:	4803      	ldr	r0, [pc, #12]	; (80002d4 <main+0x44>)
 80002c8:	f000 fb81 	bl	80009ce <SPI_SendData>

	while(1);
 80002cc:	e7fe      	b.n	80002cc <main+0x3c>
 80002ce:	bf00      	nop
 80002d0:	08000ad0 	.word	0x08000ad0
 80002d4:	40003800 	.word	0x40003800

080002d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490e      	ldr	r1, [pc, #56]	; (8000318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0e      	ldr	r2, [pc, #56]	; (800031c <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0b      	ldr	r4, [pc, #44]	; (8000324 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000302:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000306:	f000 fbb3 	bl	8000a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030a:	f7ff ffc1 	bl	8000290 <main>

0800030e <LoopForever>:

LoopForever:
    b LoopForever
 800030e:	e7fe      	b.n	800030e <LoopForever>
  ldr   r0, =_estack
 8000310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800031c:	08000ae4 	.word	0x08000ae4
  ldr r2, =_sbss
 8000320:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000324:	2000001c 	.word	0x2000001c

08000328 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC_IRQHandler>
	...

0800032c <GPIO_PeriClockControl>:
 *
 * @Note              -  none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d162      	bne.n	8000404 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a64      	ldr	r2, [pc, #400]	; (80004d4 <GPIO_PeriClockControl+0x1a8>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000346:	4b64      	ldr	r3, [pc, #400]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a63      	ldr	r2, [pc, #396]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
				else if(pGPIOx == GPIOI)
				{
					GPIOI_PCLK_DI();
				}
	}
}
 8000352:	e0b9      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a61      	ldr	r2, [pc, #388]	; (80004dc <GPIO_PeriClockControl+0x1b0>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800035c:	4b5e      	ldr	r3, [pc, #376]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a5d      	ldr	r2, [pc, #372]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000362:	f043 0302 	orr.w	r3, r3, #2
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e0ae      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a5c      	ldr	r2, [pc, #368]	; (80004e0 <GPIO_PeriClockControl+0x1b4>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000372:	4b59      	ldr	r3, [pc, #356]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a58      	ldr	r2, [pc, #352]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000378:	f043 0304 	orr.w	r3, r3, #4
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e0a3      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a58      	ldr	r2, [pc, #352]	; (80004e4 <GPIO_PeriClockControl+0x1b8>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000388:	4b53      	ldr	r3, [pc, #332]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a52      	ldr	r2, [pc, #328]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	e098      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a53      	ldr	r2, [pc, #332]	; (80004e8 <GPIO_PeriClockControl+0x1bc>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800039e:	4b4e      	ldr	r3, [pc, #312]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	4a4d      	ldr	r2, [pc, #308]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003a4:	f043 0310 	orr.w	r3, r3, #16
 80003a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003aa:	e08d      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a4f      	ldr	r2, [pc, #316]	; (80004ec <GPIO_PeriClockControl+0x1c0>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003b4:	4b48      	ldr	r3, [pc, #288]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a47      	ldr	r2, [pc, #284]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c0:	e082      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a4a      	ldr	r2, [pc, #296]	; (80004f0 <GPIO_PeriClockControl+0x1c4>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003ca:	4b43      	ldr	r3, [pc, #268]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a42      	ldr	r2, [pc, #264]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d6:	e077      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a46      	ldr	r2, [pc, #280]	; (80004f4 <GPIO_PeriClockControl+0x1c8>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003e0:	4b3d      	ldr	r3, [pc, #244]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e4:	4a3c      	ldr	r2, [pc, #240]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ec:	e06c      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a41      	ldr	r2, [pc, #260]	; (80004f8 <GPIO_PeriClockControl+0x1cc>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d168      	bne.n	80004c8 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003f6:	4b38      	ldr	r3, [pc, #224]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	4a37      	ldr	r2, [pc, #220]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80003fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000400:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000402:	e061      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a33      	ldr	r2, [pc, #204]	; (80004d4 <GPIO_PeriClockControl+0x1a8>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 800040c:	4b32      	ldr	r3, [pc, #200]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a31      	ldr	r2, [pc, #196]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000412:	f023 0301 	bic.w	r3, r3, #1
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000418:	e056      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOB)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a2f      	ldr	r2, [pc, #188]	; (80004dc <GPIO_PeriClockControl+0x1b0>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 8000422:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000426:	4a2c      	ldr	r2, [pc, #176]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000428:	f023 0302 	bic.w	r3, r3, #2
 800042c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042e:	e04b      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOC)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a2b      	ldr	r2, [pc, #172]	; (80004e0 <GPIO_PeriClockControl+0x1b4>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 8000438:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	4a26      	ldr	r2, [pc, #152]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800043e:	f023 0304 	bic.w	r3, r3, #4
 8000442:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000444:	e040      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOD)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a26      	ldr	r2, [pc, #152]	; (80004e4 <GPIO_PeriClockControl+0x1b8>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	4a21      	ldr	r2, [pc, #132]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000454:	f023 0308 	bic.w	r3, r3, #8
 8000458:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045a:	e035      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOE)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a22      	ldr	r2, [pc, #136]	; (80004e8 <GPIO_PeriClockControl+0x1bc>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800046a:	f023 0310 	bic.w	r3, r3, #16
 800046e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000470:	e02a      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOF)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <GPIO_PeriClockControl+0x1c0>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	4a16      	ldr	r2, [pc, #88]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000480:	f023 0320 	bic.w	r3, r3, #32
 8000484:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000486:	e01f      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOG)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a19      	ldr	r2, [pc, #100]	; (80004f0 <GPIO_PeriClockControl+0x1c4>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4a10      	ldr	r2, [pc, #64]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 8000496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800049a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049c:	e014      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOH)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <GPIO_PeriClockControl+0x1c8>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80004ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b2:	e009      	b.n	80004c8 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOI)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <GPIO_PeriClockControl+0x1cc>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d105      	bne.n	80004c8 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <GPIO_PeriClockControl+0x1ac>)
 80004c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40020000 	.word	0x40020000
 80004d8:	40023800 	.word	0x40023800
 80004dc:	40020400 	.word	0x40020400
 80004e0:	40020800 	.word	0x40020800
 80004e4:	40020c00 	.word	0x40020c00
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40021400 	.word	0x40021400
 80004f0:	40021800 	.word	0x40021800
 80004f4:	40021c00 	.word	0x40021c00
 80004f8:	40022000 	.word	0x40022000

080004fc <GPIO_Init>:
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2101      	movs	r1, #1
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff0e 	bl	800032c <GPIO_PeriClockControl>
	//1. Configure the mode of gpio pin
	uint32_t temp = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	2b03      	cmp	r3, #3
 800051a:	d820      	bhi.n	800055e <GPIO_Init+0x62>
	{
		//non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	795b      	ldrb	r3, [r3, #5]
 8000520:	461a      	mov	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	2103      	movs	r1, #3
 800053c:	fa01 f303 	lsl.w	r3, r1, r3
 8000540:	43db      	mvns	r3, r3
 8000542:	4619      	mov	r1, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	400a      	ands	r2, r1
 800054a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6819      	ldr	r1, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	69fa      	ldr	r2, [r7, #28]
 8000558:	430a      	orrs	r2, r1
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	e0d1      	b.n	8000702 <GPIO_Init+0x206>

	}
	else
	{
		//Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	795b      	ldrb	r3, [r3, #5]
 8000562:	2b04      	cmp	r3, #4
 8000564:	d117      	bne.n	8000596 <GPIO_Init+0x9a>
		{
			//1.Configure the FTSR
			//EXTI->FTSR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000566:	4b4b      	ldr	r3, [pc, #300]	; (8000694 <GPIO_Init+0x198>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	7912      	ldrb	r2, [r2, #4]
 800056e:	4611      	mov	r1, r2
 8000570:	2201      	movs	r2, #1
 8000572:	408a      	lsls	r2, r1
 8000574:	4611      	mov	r1, r2
 8000576:	4a47      	ldr	r2, [pc, #284]	; (8000694 <GPIO_Init+0x198>)
 8000578:	430b      	orrs	r3, r1
 800057a:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800057c:	4b45      	ldr	r3, [pc, #276]	; (8000694 <GPIO_Init+0x198>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	7912      	ldrb	r2, [r2, #4]
 8000584:	4611      	mov	r1, r2
 8000586:	2201      	movs	r2, #1
 8000588:	408a      	lsls	r2, r1
 800058a:	43d2      	mvns	r2, r2
 800058c:	4611      	mov	r1, r2
 800058e:	4a41      	ldr	r2, [pc, #260]	; (8000694 <GPIO_Init+0x198>)
 8000590:	400b      	ands	r3, r1
 8000592:	6093      	str	r3, [r2, #8]
 8000594:	e035      	b.n	8000602 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	795b      	ldrb	r3, [r3, #5]
 800059a:	2b05      	cmp	r3, #5
 800059c:	d117      	bne.n	80005ce <GPIO_Init+0xd2>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059e:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <GPIO_Init+0x198>)
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	7912      	ldrb	r2, [r2, #4]
 80005a6:	4611      	mov	r1, r2
 80005a8:	2201      	movs	r2, #1
 80005aa:	408a      	lsls	r2, r1
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a39      	ldr	r2, [pc, #228]	; (8000694 <GPIO_Init+0x198>)
 80005b0:	430b      	orrs	r3, r1
 80005b2:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR bit
			EXTI->FTSR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b4:	4b37      	ldr	r3, [pc, #220]	; (8000694 <GPIO_Init+0x198>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	7912      	ldrb	r2, [r2, #4]
 80005bc:	4611      	mov	r1, r2
 80005be:	2201      	movs	r2, #1
 80005c0:	408a      	lsls	r2, r1
 80005c2:	43d2      	mvns	r2, r2
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a33      	ldr	r2, [pc, #204]	; (8000694 <GPIO_Init+0x198>)
 80005c8:	400b      	ands	r3, r1
 80005ca:	60d3      	str	r3, [r2, #12]
 80005cc:	e019      	b.n	8000602 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	795b      	ldrb	r3, [r3, #5]
 80005d2:	2b06      	cmp	r3, #6
 80005d4:	d115      	bne.n	8000602 <GPIO_Init+0x106>
		{
			//1. Configure the FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <GPIO_Init+0x198>)
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	7912      	ldrb	r2, [r2, #4]
 80005de:	4611      	mov	r1, r2
 80005e0:	2201      	movs	r2, #1
 80005e2:	408a      	lsls	r2, r1
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <GPIO_Init+0x198>)
 80005e8:	430b      	orrs	r3, r1
 80005ea:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <GPIO_Init+0x198>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7912      	ldrb	r2, [r2, #4]
 80005f4:	4611      	mov	r1, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	408a      	lsls	r2, r1
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a25      	ldr	r2, [pc, #148]	; (8000694 <GPIO_Init+0x198>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	60d3      	str	r3, [r2, #12]
		}

		//2.configure the GPIO port selection in SYSCFG_EXTICR

		uint32_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	089b      	lsrs	r3, r3, #2
 8000608:	b2db      	uxtb	r3, r3
 800060a:	61bb      	str	r3, [r7, #24]
		uint32_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	f003 0303 	and.w	r3, r3, #3
 8000614:	617b      	str	r3, [r7, #20]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a1f      	ldr	r2, [pc, #124]	; (8000698 <GPIO_Init+0x19c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d04d      	beq.n	80006bc <GPIO_Init+0x1c0>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1d      	ldr	r2, [pc, #116]	; (800069c <GPIO_Init+0x1a0>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d032      	beq.n	8000690 <GPIO_Init+0x194>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <GPIO_Init+0x1a4>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d02b      	beq.n	800068c <GPIO_Init+0x190>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1a      	ldr	r2, [pc, #104]	; (80006a4 <GPIO_Init+0x1a8>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d024      	beq.n	8000688 <GPIO_Init+0x18c>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a19      	ldr	r2, [pc, #100]	; (80006a8 <GPIO_Init+0x1ac>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d01d      	beq.n	8000684 <GPIO_Init+0x188>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a17      	ldr	r2, [pc, #92]	; (80006ac <GPIO_Init+0x1b0>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d016      	beq.n	8000680 <GPIO_Init+0x184>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a16      	ldr	r2, [pc, #88]	; (80006b0 <GPIO_Init+0x1b4>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d00f      	beq.n	800067c <GPIO_Init+0x180>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <GPIO_Init+0x1b8>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d008      	beq.n	8000678 <GPIO_Init+0x17c>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <GPIO_Init+0x1bc>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d101      	bne.n	8000674 <GPIO_Init+0x178>
 8000670:	2308      	movs	r3, #8
 8000672:	e024      	b.n	80006be <GPIO_Init+0x1c2>
 8000674:	2300      	movs	r3, #0
 8000676:	e022      	b.n	80006be <GPIO_Init+0x1c2>
 8000678:	2307      	movs	r3, #7
 800067a:	e020      	b.n	80006be <GPIO_Init+0x1c2>
 800067c:	2306      	movs	r3, #6
 800067e:	e01e      	b.n	80006be <GPIO_Init+0x1c2>
 8000680:	2305      	movs	r3, #5
 8000682:	e01c      	b.n	80006be <GPIO_Init+0x1c2>
 8000684:	2304      	movs	r3, #4
 8000686:	e01a      	b.n	80006be <GPIO_Init+0x1c2>
 8000688:	2303      	movs	r3, #3
 800068a:	e018      	b.n	80006be <GPIO_Init+0x1c2>
 800068c:	2302      	movs	r3, #2
 800068e:	e016      	b.n	80006be <GPIO_Init+0x1c2>
 8000690:	2301      	movs	r3, #1
 8000692:	e014      	b.n	80006be <GPIO_Init+0x1c2>
 8000694:	40013c00 	.word	0x40013c00
 8000698:	40020000 	.word	0x40020000
 800069c:	40020400 	.word	0x40020400
 80006a0:	40020800 	.word	0x40020800
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40021400 	.word	0x40021400
 80006b0:	40021800 	.word	0x40021800
 80006b4:	40021c00 	.word	0x40021c00
 80006b8:	40022000 	.word	0x40022000
 80006bc:	2300      	movs	r3, #0
 80006be:	74fb      	strb	r3, [r7, #19]

		SYSCFG_PCLK_EN();
 80006c0:	4b60      	ldr	r3, [pc, #384]	; (8000844 <GPIO_Init+0x348>)
 80006c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c4:	4a5f      	ldr	r2, [pc, #380]	; (8000844 <GPIO_Init+0x348>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= portcode << (4 * temp2);
 80006cc:	4a5e      	ldr	r2, [pc, #376]	; (8000848 <GPIO_Init+0x34c>)
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	3302      	adds	r3, #2
 80006d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d6:	7cf9      	ldrb	r1, [r7, #19]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	0092      	lsls	r2, r2, #2
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	4959      	ldr	r1, [pc, #356]	; (8000848 <GPIO_Init+0x34c>)
 80006e2:	431a      	orrs	r2, r3
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	3302      	adds	r3, #2
 80006e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//3.enable the exti interrupt delivery using IMR(Interrupt Mask Register)
			EXTI->IMR |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ec:	4b57      	ldr	r3, [pc, #348]	; (800084c <GPIO_Init+0x350>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	7912      	ldrb	r2, [r2, #4]
 80006f4:	4611      	mov	r1, r2
 80006f6:	2201      	movs	r2, #1
 80006f8:	408a      	lsls	r2, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	4a53      	ldr	r2, [pc, #332]	; (800084c <GPIO_Init+0x350>)
 80006fe:	430b      	orrs	r3, r1
 8000700:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	799b      	ldrb	r3, [r3, #6]
 800070a:	461a      	mov	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	2103      	movs	r1, #3
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	43db      	mvns	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	400a      	ands	r2, r1
 8000734:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6899      	ldr	r1, [r3, #8]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	69fa      	ldr	r2, [r7, #28]
 8000742:	430a      	orrs	r2, r1
 8000744:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]

	//3. Configure the pupd settings

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	79db      	ldrb	r3, [r3, #7]
 800074e:	461a      	mov	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68da      	ldr	r2, [r3, #12]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	2103      	movs	r1, #3
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	4619      	mov	r1, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	400a      	ands	r2, r1
 8000778:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	68d9      	ldr	r1, [r3, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	69fa      	ldr	r2, [r7, #28]
 8000786:	430a      	orrs	r2, r1
 8000788:	60da      	str	r2, [r3, #12]

	temp = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]

	//4. Configure the optype

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	7a1b      	ldrb	r3, [r3, #8]
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	4619      	mov	r1, r3
 80007aa:	2301      	movs	r3, #1
 80007ac:	408b      	lsls	r3, r1
 80007ae:	43db      	mvns	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	400a      	ands	r2, r1
 80007b8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6859      	ldr	r1, [r3, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	69fa      	ldr	r2, [r7, #28]
 80007c6:	430a      	orrs	r2, r1
 80007c8:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]

	//5. Configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	795b      	ldrb	r3, [r3, #5]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d132      	bne.n	800083c <GPIO_Init+0x340>
	{
			uint32_t temp1, temp2;
			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	60fb      	str	r3, [r7, #12]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	f003 0307 	and.w	r3, r3, #7
 80007e8:	60bb      	str	r3, [r7, #8]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << 4 * temp2);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	3208      	adds	r2, #8
 80007f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	210f      	movs	r1, #15
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4011      	ands	r1, r2
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	3208      	adds	r2, #8
 800080e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	3208      	adds	r2, #8
 800081a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7a5b      	ldrb	r3, [r3, #9]
 8000822:	4619      	mov	r1, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	fa01 f303 	lsl.w	r3, r1, r3
 800082c:	4619      	mov	r1, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4311      	orrs	r1, r2
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	3208      	adds	r2, #8
 8000838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40013800 	.word	0x40013800
 800084c:	40013c00 	.word	0x40013c00

08000850 <SPI_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d120      	bne.n	80008a4 <SPI_PeriClockControl+0x54>
		{
			if(pSPIx == SPI1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <SPI_PeriClockControl+0xa0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d106      	bne.n	8000878 <SPI_PeriClockControl+0x28>
			{
				SPI1_PCLK_EN();
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <SPI_PeriClockControl+0xa4>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <SPI_PeriClockControl+0xa4>)
 8000870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
		}else if (pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}
 8000876:	e035      	b.n	80008e4 <SPI_PeriClockControl+0x94>
			}else if (pSPIx == SPI2)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <SPI_PeriClockControl+0xa8>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d106      	bne.n	800088e <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <SPI_PeriClockControl+0xa4>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <SPI_PeriClockControl+0xa4>)
 8000886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800088c:	e02a      	b.n	80008e4 <SPI_PeriClockControl+0x94>
			}else if (pSPIx == SPI3)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a1a      	ldr	r2, [pc, #104]	; (80008fc <SPI_PeriClockControl+0xac>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d126      	bne.n	80008e4 <SPI_PeriClockControl+0x94>
				SPI3_PCLK_EN();
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <SPI_PeriClockControl+0xa4>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <SPI_PeriClockControl+0xa4>)
 800089c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008a2:	e01f      	b.n	80008e4 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <SPI_PeriClockControl+0xa0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d106      	bne.n	80008ba <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <SPI_PeriClockControl+0xa4>)
 80008ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b0:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <SPI_PeriClockControl+0xa4>)
 80008b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008b6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008b8:	e014      	b.n	80008e4 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <SPI_PeriClockControl+0xa8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d106      	bne.n	80008d0 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <SPI_PeriClockControl+0xa4>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <SPI_PeriClockControl+0xa4>)
 80008c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ce:	e009      	b.n	80008e4 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <SPI_PeriClockControl+0xac>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d105      	bne.n	80008e4 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SPI_PeriClockControl+0xa4>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SPI_PeriClockControl+0xa4>)
 80008de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008e2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40013000 	.word	0x40013000
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40003800 	.word	0x40003800
 80008fc:	40003c00 	.word	0x40003c00

08000900 <SPI_Init>:

/*
 * Init and De-init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2101      	movs	r1, #1
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff9e 	bl	8000850 <SPI_PeriClockControl>
	//First lets configure the SPI_CR1 reg
	uint32_t temp = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
	//1. Lets configure the device mode
	temp |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4313      	orrs	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	795b      	ldrb	r3, [r3, #5]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d104      	bne.n	8000938 <SPI_Init+0x38>
	{
		// clear the contents of 15th bit position
		temp &= ~( 1 << SPI_CR1_BIDIMODE);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	e014      	b.n	8000962 <SPI_Init+0x62>
	} else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	795b      	ldrb	r3, [r3, #5]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d104      	bne.n	800094a <SPI_Init+0x4a>
	{
		temp |= ( 1 << SPI_CR1_BIDIMODE);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e00b      	b.n	8000962 <SPI_Init+0x62>
	} else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	795b      	ldrb	r3, [r3, #5]
 800094e:	2b03      	cmp	r3, #3
 8000950:	d107      	bne.n	8000962 <SPI_Init+0x62>
	{
		// clear the contents of 15th bit and then force RX only to 1 to keep the clk active
		temp &= ~( 1 << SPI_CR1_BIDIMODE);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000958:	60fb      	str	r3, [r7, #12]
		temp |= ( 1 << SPI_CR1_RXONLY);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000960:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the baud rate

	temp |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << 3);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	799b      	ldrb	r3, [r3, #6]
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	461a      	mov	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	4313      	orrs	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF

	temp |= (pSPIHandle->SPIConfig.SPI_DFF << 11);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	79db      	ldrb	r3, [r3, #7]
 8000974:	02db      	lsls	r3, r3, #11
 8000976:	461a      	mov	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4313      	orrs	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]

	//5. Configure CPOL

	temp |= (pSPIHandle->SPIConfig.SPI_CPOL << 1);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	7a1b      	ldrb	r3, [r3, #8]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	461a      	mov	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4313      	orrs	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]

	// 6. Configure CPHA

	temp |= (pSPIHandle->SPIConfig.SPI_CPHA << 0);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7a5b      	ldrb	r3, [r3, #9]
 8000990:	461a      	mov	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	4313      	orrs	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	601a      	str	r2, [r3, #0]


}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <SPI_GetFlagStatus>:
		SPI3_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	4013      	ands	r3, r2
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80009be:	2301      	movs	r3, #1
 80009c0:	e000      	b.n	80009c4 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <SPI_SendData>:

/*
 * Data Send and Receive
 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80009da:	e027      	b.n	8000a2c <SPI_SendData+0x5e>
	{
		//1. Wait until tx buffer is empty
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 80009dc:	bf00      	nop
 80009de:	2102      	movs	r1, #2
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f7ff ffe1 	bl	80009a8 <SPI_GetFlagStatus>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f8      	beq.n	80009de <SPI_SendData+0x10>

		//2. Check DFF
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00e      	beq.n	8000a16 <SPI_SendData+0x48>
		{
			// 16 BIT DFF
			// Load the data in the DR
			pSPIx->DR = *((uint16_t *)pTxBuffer);
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	60da      	str	r2, [r3, #12]
			Len--;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
			Len--;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	607b      	str	r3, [r7, #4]
			//point to the next location
			(uint16_t *)pTxBuffer++;
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	e00a      	b.n	8000a2c <SPI_SendData+0x5e>
		}
		else
		{
			// 8 BIT DFF
			// Load the data in the DR
			pSPIx->DR = *(pTxBuffer);
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	60da      	str	r2, [r3, #12]
			Len--;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1d4      	bne.n	80009dc <SPI_SendData+0xe>
		}

	}
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <SPI_SSIConfig>:
	}
}


void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	460b      	mov	r3, r1
 8000a44:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a46:	78fb      	ldrb	r3, [r7, #3]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d106      	bne.n	8000a5a <SPI_SSIConfig+0x20>
		{
			pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
		}
}
 8000a58:	e005      	b.n	8000a66 <SPI_SSIConfig+0x2c>
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <__libc_init_array>:
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	4e0d      	ldr	r6, [pc, #52]	; (8000aa8 <__libc_init_array+0x38>)
 8000a74:	4c0d      	ldr	r4, [pc, #52]	; (8000aac <__libc_init_array+0x3c>)
 8000a76:	1ba4      	subs	r4, r4, r6
 8000a78:	10a4      	asrs	r4, r4, #2
 8000a7a:	2500      	movs	r5, #0
 8000a7c:	42a5      	cmp	r5, r4
 8000a7e:	d109      	bne.n	8000a94 <__libc_init_array+0x24>
 8000a80:	4e0b      	ldr	r6, [pc, #44]	; (8000ab0 <__libc_init_array+0x40>)
 8000a82:	4c0c      	ldr	r4, [pc, #48]	; (8000ab4 <__libc_init_array+0x44>)
 8000a84:	f000 f818 	bl	8000ab8 <_init>
 8000a88:	1ba4      	subs	r4, r4, r6
 8000a8a:	10a4      	asrs	r4, r4, #2
 8000a8c:	2500      	movs	r5, #0
 8000a8e:	42a5      	cmp	r5, r4
 8000a90:	d105      	bne.n	8000a9e <__libc_init_array+0x2e>
 8000a92:	bd70      	pop	{r4, r5, r6, pc}
 8000a94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a98:	4798      	blx	r3
 8000a9a:	3501      	adds	r5, #1
 8000a9c:	e7ee      	b.n	8000a7c <__libc_init_array+0xc>
 8000a9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aa2:	4798      	blx	r3
 8000aa4:	3501      	adds	r5, #1
 8000aa6:	e7f2      	b.n	8000a8e <__libc_init_array+0x1e>
 8000aa8:	08000adc 	.word	0x08000adc
 8000aac:	08000adc 	.word	0x08000adc
 8000ab0:	08000adc 	.word	0x08000adc
 8000ab4:	08000ae0 	.word	0x08000ae0

08000ab8 <_init>:
 8000ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aba:	bf00      	nop
 8000abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000abe:	bc08      	pop	{r3}
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	4770      	bx	lr

08000ac4 <_fini>:
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac6:	bf00      	nop
 8000ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aca:	bc08      	pop	{r3}
 8000acc:	469e      	mov	lr, r3
 8000ace:	4770      	bx	lr
